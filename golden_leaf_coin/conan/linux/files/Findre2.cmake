

function(conan_message MESSAGE_OUTPUT)
    if (NOT CONAN_CMAKE_SILENT_OUTPUT)
        message(${ARGV${0}})
    endif ()
endfunction()


macro(conan_find_apple_frameworks FRAMEWORKS_FOUND FRAMEWORKS FRAMEWORKS_DIRS)
    if (APPLE)
        foreach (_FRAMEWORK ${FRAMEWORKS})
            # https://cmake.org/pipermail/cmake-developers/2017-August/030199.html
            find_library(CONAN_FRAMEWORK_${_FRAMEWORK}_FOUND NAMES ${_FRAMEWORK} PATHS ${FRAMEWORKS_DIRS} CMAKE_FIND_ROOT_PATH_BOTH)
            if (CONAN_FRAMEWORK_${_FRAMEWORK}_FOUND)
                list(APPEND ${FRAMEWORKS_FOUND} ${CONAN_FRAMEWORK_${_FRAMEWORK}_FOUND})
            else ()
                message(FATAL_ERROR "Framework library ${_FRAMEWORK} not found in paths: ${FRAMEWORKS_DIRS}")
            endif ()
        endforeach ()
    endif ()
endmacro()


function(conan_package_library_targets libraries package_libdir deps out_libraries out_libraries_target build_type package_name)
    unset(_CONAN_ACTUAL_TARGETS CACHE)
    unset(_CONAN_FOUND_SYSTEM_LIBS CACHE)
    foreach (_LIBRARY_NAME ${libraries})
        find_library(CONAN_FOUND_LIBRARY NAMES ${_LIBRARY_NAME} PATHS ${package_libdir}
                NO_DEFAULT_PATH NO_CMAKE_FIND_ROOT_PATH)
        if (CONAN_FOUND_LIBRARY)
            conan_message(STATUS "Library ${_LIBRARY_NAME} found ${CONAN_FOUND_LIBRARY}")
            list(APPEND _out_libraries ${CONAN_FOUND_LIBRARY})
            if (NOT ${CMAKE_VERSION} VERSION_LESS "3.0")
                # Create a micro-target for each lib/a found
                string(REGEX REPLACE "[^A-Za-z0-9.+_-]" "_" _LIBRARY_NAME ${_LIBRARY_NAME})
                set(_LIB_NAME CONAN_LIB::${package_name}_${_LIBRARY_NAME} ${build_type})
                if (NOT TARGET ${_LIB_NAME})
                    # Create a micro-target for each lib/a found
                    add_library(${_LIB_NAME} UNKNOWN IMPORTED)
                    set_target_properties(${_LIB_NAME} PROPERTIES IMPORTED_LOCATION ${CONAN_FOUND_LIBRARY})
                    set(_CONAN_ACTUAL_TARGETS ${_CONAN_ACTUAL_TARGETS} ${_LIB_NAME})
                else ()
                    conan_message(STATUS "Skipping already existing target: ${_LIB_NAME}")
                endif ()
                list(APPEND _out_libraries_target ${_LIB_NAME})
            endif ()
            conan_message(STATUS "Found: ${CONAN_FOUND_LIBRARY}")
        else ()
            conan_message(STATUS "Library ${_LIBRARY_NAME} not found in package, might be system one")
            list(APPEND _out_libraries_target ${_LIBRARY_NAME})
            list(APPEND _out_libraries ${_LIBRARY_NAME})
            set(_CONAN_FOUND_SYSTEM_LIBS "${_CONAN_FOUND_SYSTEM_LIBS};${_LIBRARY_NAME}")
        endif ()
        unset(CONAN_FOUND_LIBRARY CACHE)
    endforeach ()

    if (NOT ${CMAKE_VERSION} VERSION_LESS "3.0")
        # Add all dependencies to all targets
        string(REPLACE " " ";" deps_list "${deps}")
        foreach (_CONAN_ACTUAL_TARGET ${_CONAN_ACTUAL_TARGETS})
            set_property(TARGET ${_CONAN_ACTUAL_TARGET} PROPERTY INTERFACE_LINK_LIBRARIES "${_CONAN_FOUND_SYSTEM_LIBS};${deps_list}")
        endforeach ()
    endif ()

    set(${out_libraries} ${_out_libraries} PARENT_SCOPE)
    set(${out_libraries_target} ${_out_libraries_target} PARENT_SCOPE)
endfunction()


include(FindPackageHandleStandardArgs)

conan_message(STATUS "Conan: Using autogenerated Findre2.cmake")
# Global approach
set(re2_FOUND 1)
set(re2_VERSION "20221201")

find_package_handle_standard_args(re2 REQUIRED_VARS
        re2_VERSION VERSION_VAR re2_VERSION)
mark_as_advanced(re2_FOUND re2_VERSION)


set(re2_INCLUDE_DIRS "/home/andriy/.conan/data/re2/20221201/_/_/package/d8d8aba822aaa76849d2f1bafe4a2a62a9f83b74/include")
set(re2_INCLUDE_DIR "/home/andriy/.conan/data/re2/20221201/_/_/package/d8d8aba822aaa76849d2f1bafe4a2a62a9f83b74/include")
set(re2_INCLUDES "/home/andriy/.conan/data/re2/20221201/_/_/package/d8d8aba822aaa76849d2f1bafe4a2a62a9f83b74/include")
set(re2_RES_DIRS)
set(re2_DEFINITIONS)
set(re2_LINKER_FLAGS_LIST
        "$<$<STREQUAL:$<TARGET_PROPERTY:TYPE>,SHARED_LIBRARY>:>"
        "$<$<STREQUAL:$<TARGET_PROPERTY:TYPE>,MODULE_LIBRARY>:>"
        "$<$<STREQUAL:$<TARGET_PROPERTY:TYPE>,EXECUTABLE>:>"
        )
set(re2_COMPILE_DEFINITIONS)
set(re2_COMPILE_OPTIONS_LIST "" "")
set(re2_COMPILE_OPTIONS_C "")
set(re2_COMPILE_OPTIONS_CXX "")
set(re2_LIBRARIES_TARGETS "") # Will be filled later, if CMake 3
set(re2_LIBRARIES "") # Will be filled later
set(re2_LIBS "") # Same as re2_LIBRARIES
set(re2_SYSTEM_LIBS m pthread)
set(re2_FRAMEWORK_DIRS)
set(re2_FRAMEWORKS)
set(re2_FRAMEWORKS_FOUND "") # Will be filled later
set(re2_BUILD_MODULES_PATHS)

conan_find_apple_frameworks(re2_FRAMEWORKS_FOUND "${re2_FRAMEWORKS}" "${re2_FRAMEWORK_DIRS}")

mark_as_advanced(re2_INCLUDE_DIRS
        re2_INCLUDE_DIR
        re2_INCLUDES
        re2_DEFINITIONS
        re2_LINKER_FLAGS_LIST
        re2_COMPILE_DEFINITIONS
        re2_COMPILE_OPTIONS_LIST
        re2_LIBRARIES
        re2_LIBS
        re2_LIBRARIES_TARGETS)

# Find the real .lib/.a and add them to re2_LIBS and re2_LIBRARY_LIST
set(re2_LIBRARY_LIST re2)
set(re2_LIB_DIRS "/home/andriy/.conan/data/re2/20221201/_/_/package/d8d8aba822aaa76849d2f1bafe4a2a62a9f83b74/lib")

# Gather all the libraries that should be linked to the targets (do not touch existing variables):
set(_re2_DEPENDENCIES "${re2_FRAMEWORKS_FOUND} ${re2_SYSTEM_LIBS} ")

conan_package_library_targets("${re2_LIBRARY_LIST}"  # libraries
        "${re2_LIB_DIRS}"      # package_libdir
        "${_re2_DEPENDENCIES}"  # deps
        re2_LIBRARIES            # out_libraries
        re2_LIBRARIES_TARGETS    # out_libraries_targets
        ""                          # build_type
        "re2")                                      # package_name

set(re2_LIBS ${re2_LIBRARIES})

foreach (_FRAMEWORK ${re2_FRAMEWORKS_FOUND})
    list(APPEND re2_LIBRARIES_TARGETS ${_FRAMEWORK})
    list(APPEND re2_LIBRARIES ${_FRAMEWORK})
endforeach ()

foreach (_SYSTEM_LIB ${re2_SYSTEM_LIBS})
    list(APPEND re2_LIBRARIES_TARGETS ${_SYSTEM_LIB})
    list(APPEND re2_LIBRARIES ${_SYSTEM_LIB})
endforeach ()

# We need to add our requirements too
set(re2_LIBRARIES_TARGETS "${re2_LIBRARIES_TARGETS};")
set(re2_LIBRARIES "${re2_LIBRARIES};")

set(CMAKE_MODULE_PATH "/home/andriy/.conan/data/re2/20221201/_/_/package/d8d8aba822aaa76849d2f1bafe4a2a62a9f83b74/" ${CMAKE_MODULE_PATH})
set(CMAKE_PREFIX_PATH "/home/andriy/.conan/data/re2/20221201/_/_/package/d8d8aba822aaa76849d2f1bafe4a2a62a9f83b74/" ${CMAKE_PREFIX_PATH})

if (NOT ${CMAKE_VERSION} VERSION_LESS "3.0")
    # Target approach
    if (NOT TARGET re2::re2)
        add_library(re2::re2 INTERFACE IMPORTED)
        if (re2_INCLUDE_DIRS)
            set_target_properties(re2::re2 PROPERTIES INTERFACE_INCLUDE_DIRECTORIES
                    "${re2_INCLUDE_DIRS}")
        endif ()
        set_property(TARGET re2::re2 PROPERTY INTERFACE_LINK_LIBRARIES
                "${re2_LIBRARIES_TARGETS};${re2_LINKER_FLAGS_LIST}")
        set_property(TARGET re2::re2 PROPERTY INTERFACE_COMPILE_DEFINITIONS
                ${re2_COMPILE_DEFINITIONS})
        set_property(TARGET re2::re2 PROPERTY INTERFACE_COMPILE_OPTIONS
                "${re2_COMPILE_OPTIONS_LIST}")

    endif ()
endif ()

foreach (_BUILD_MODULE_PATH ${re2_BUILD_MODULES_PATHS})
    include(${_BUILD_MODULE_PATH})
endforeach ()
